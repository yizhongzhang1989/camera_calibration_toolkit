name: Camera Calibration Tests

on:
  push:
    branches: [ main, develop, auto_test ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          # Ubuntu testing - comprehensive Python versions
          - os: ubuntu-latest
            python-version: "3.8"
          - os: ubuntu-latest  
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          # Windows testing - key versions only
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.11"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        # Install headless OpenCV for CI (no GUI dependencies needed)
        pip install numpy opencv-contrib-python-headless scipy PyYAML Pillow
        # Optional packages for web interface (try to install, continue if they fail)
        python -c "
        try:
            import subprocess
            subprocess.run(['pip', 'install', 'Flask', 'Werkzeug'], check=True)
            print('✅ Web packages installed successfully')
        except subprocess.CalledProcessError:
            print('⚠️ Web packages failed to install, continuing without them')
        "
    
    - name: Verify installation
      run: |
        python --version
        python -c "import numpy; print(f'NumPy: {numpy.__version__}')"
        python -c "import cv2; print(f'OpenCV: {cv2.__version__}')" 
        python -c "import pytest; print(f'pytest: {pytest.__version__}')"
    
    - name: List test files (Unix)
      if: runner.os != 'Windows'
      run: ls -la tests/unit/
    
    - name: List test files (Windows)
      if: runner.os == 'Windows'
      run: Get-ChildItem tests/unit/ -Name
      shell: powershell
    
    - name: Run tests
      run: |
        python -m pytest tests/unit/test_patterns_simple.py tests/unit/test_utils_simple.py -v --cov=core --cov-report=xml
    
    - name: Check results (Unix)
      if: runner.os != 'Windows'
      run: |
        ls -la coverage.xml || echo "No coverage file generated"
        echo "✅ Tests completed for Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    
    - name: Check results (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path coverage.xml) { Get-ChildItem coverage.xml } else { Write-Host "No coverage file generated" }
        Write-Host "✅ Tests completed for Python ${{ matrix.python-version }} on ${{ matrix.os }}"
      shell: powershell
