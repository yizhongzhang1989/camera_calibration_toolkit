name: Camera Calibration Tests

# Trigger events - when to run tests
on:
  push:
    branches: [ main, develop, auto_test ]  # Run on pushes to these branches
  pull_request:
    branches: [ main ]                      # Run on PRs to main
  schedule:
    - cron: '0 2 * * 1'                    # Weekly on Monday at 2 AM UTC
  workflow_dispatch:                        # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest                  # Use Ubuntu (free, fast)
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]  # Test multiple Python versions
    
    steps:
    # Step 1: Check out your code
    - uses: actions/checkout@v4
    
    # Step 2: Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # Step 3: Install system dependencies (for OpenCV)
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
    
    # Step 4: Install Python dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html
    
    # Step 5: Run linting (optional but recommended)
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 core/ web/ examples/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    # Step 6: Run unit tests
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=core --cov=web --cov-report=xml
    
    # Step 7: Run integration tests
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov-append --cov=core --cov=web --cov-report=xml
    
    # Step 8: Run example scripts (validate they work)
    - name: Test example scripts
      run: |
        python examples/intrinsic_calibration_example.py
        python examples/eye_in_hand_calibration_example.py
    
    # Step 9: Upload test results and coverage
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false  # Don't fail CI if codecov fails
    
    # Step 10: Upload test artifacts (logs, results)
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()  # Upload even if tests fail
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          data/results/
          pytest-report.html
          coverage.xml
